// Generated by CoffeeScript 1.8.0
(function() {
  var Clirooo,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Clirooo = Clirooo || {};

  (function() {
    return Clirooo.initialize = function(shell) {
      return Clirooo.CmdHandler.enableCliroooCommandMode(shell);
    };
  })();

  Clirooo.getApiBaseUrl = function() {
    return "http://dev.api.clirooo.co/";
  };

  Clirooo.Util = Clirooo.Util || {};

  (function() {
    return Clirooo.Util.toUpperCaseOnlyFirstLetter = function(msg) {
      return "" + (msg.substring(0, 1).toUpperCase()) + (msg.substring(1));
    };
  })();

  Clirooo.Station = Clirooo.Station || {};

  (function() {
    var __stations;
    __stations = ["aoyama-itchome", "akasaka", "akasaka-mitsuke", "akabane-iwabuchi", "akihabara", "asakusa", "azabu-juban", "ayase", "awajicho", "iidabashi", "ikebukuro", "ichigaya", "inaricho", "iriya", "ueno", "ueno-hirokoji", "urayasu", "edogawabashi", "ebisu", "oji", "oji-kamiya", "otemachi", "ogikubo", "oshiage", "ochiai", "ochanomizu", "omote-sando", "gaiemmae", "kagurazaka", "kasai", "kasumigaseki", "kanamecho", "kamiyacho", "kayabacho", "kanda", "kita-ayase", "kita-sando", "kita-senju", "kiba", "gyotoku", "kyobashi", "kiyosumi-shirakawa", "ginza", "ginza-itchome", "kinshicho", "kudanshita", "kojimachi", "korakuen", "gokokuji", "kotake-mukaihara", "kokkai-gijidomae", "kodemmacho", "komagome", "sakuradamon", "shibuya", "shimo", "shirokanedai", "shirokane-takanawa", "shin-otsuka", "shin-ochanomizu", "shin-kiba", "shin-koenji", "shinjuku", "shinjuku-gyoemmae", "shinjuku-sanchome", "shintomicho", "shin-nakano", "shimbashi", "jimbocho", "suitengumae", "suehirocho", "sumiyoshi", "senkawa", "sendagi", "zoshigaya", "takadanobaba", "takebashi", "tatsumi", "tameike-sanno", "tawaramachi", "chikatetsu-akatsuka", "chikatetsu-narimasu", "tsukiji", "tsukishima", "tokyo", "todaimae", "toyocho", "toyosu", "toranomon", "naka-okachimachi", "nagatacho", "nakano", "nakano-sakaue", "nakano-shimbashi", "nakano-fujimicho", "naka-meguro", "nishi-kasai", "nishigahara", "nishi-shinjuku", "nishi-nippori", "nishi-funabashi", "nishi-waseda", "nijubashimae", "nihombashi", "ningyocho", "nezu", "nogizaka", "hatchobori", "baraki-nakayama", "hanzomon", "higashi-ikebukuro", "higashi-ginza", "higashi-koenji", "higashi-shinjuku", "hikawadai", "hibiya", "hiro-o", "heiwadai", "honancho", "hongo-sanchome", "hon-komagome", "machiya", "mitsukoshimae", "minami-asagaya", "minami-gyotoku", "minami-sunamachi", "minami-senju", "minowa", "myogadani", "myoden", "meiji-jingumae", "meguro", "monzen-nakacho", "yurakucho", "yushima", "yotsuya", "yotsuya-sanchome", "yoyogi-uehara", "yoyogi-koen", "roppongi", "roppongi-itchome", "wakoshi", "waseda"];
    Clirooo.Station.getList = function() {
      return __stations;
    };
    return Clirooo.Station.getResponse = function(args, callback) {
      var apiParams, cmdParams, station;
      station = args[0];
      cmdParams = args.slice(1);
      if (!station) {
        callback("clirooo station STATION [options]");
        return;
      }
      apiParams = {
        "station": station
      };
      return $.getJSON(Clirooo.getApiBaseUrl() + "station.json", apiParams, function(json) {
        var data, lineName, response, _ref;
        response = '';
        _ref = json.result;
        for (lineName in _ref) {
          data = _ref[lineName];
          response += "<span class=\"tm-text-" + data.line + "\">" + (Clirooo.Util.toUpperCaseOnlyFirstLetter(data.line)) + "&nbsp</span>" + data.stationCode + "<br />";
        }
        return callback(response);
      }).error(function(jqXHR, textStatus, errorThrown) {
        return callback(JSON.parse(jqXHR.responseText));
      });
    };
  })();

  Clirooo.Help = Clirooo.Help || {};

  (function() {
    return Clirooo.Help.getResponse = function() {
      return "Usage: clirooo SUBCOMMAND (options)<br />\n&nbsp;<code>clirooo delay</code><br />\n&nbsp;<code>clirooo here</code><br />\n&nbsp;<code>clirooo line [LINE]</code><br />\n&nbsp;<code>clirooo route STATION(FROM) STATION(TO) [options]</code><br />\n&nbsp;<code>clirooo station STATION</code><br />\n&nbsp;<code>clirooo status</code><br />\n&nbsp;<code>clirooo timetable STATION</code><br />";
    };
  })();

  Clirooo.Mannar = Clirooo.Mannar || {};

  (function() {
    return Clirooo.Mannar.getResponse = function() {
      return "response form mannar";
    };
  })();

  Clirooo.Ascii = Clirooo.Ascii || {};

  (function() {
    return Clirooo.Ascii.getResponse = function() {
      var ascii, ascii_olm;
      ascii = " `..............................................................`   \n.::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::.  \n-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-  \n-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-  \n-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-  \n-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-  \n-:::::::::::-.````.--::::::::::::::::::::::::-..````.::::::::::::-  \n-::::::::::.          `.-::::::::::::::::-.`          -::::::::::-  \n-:::::::::-               .-::::::::::-`               -:::::::::-  \n-:::::::::`       `.--.``    .-::::-`    `..--.        .:::::::::-  \n-:::::::::`      `::::::::-`   `-.`   .-::::::::       .:::::::::-  \n-:::::::::.      `:::::::::::-`    `-:::::::::::       -:::::::::-  \n-:::::::::-       -::::::::::.      -::::::::::-       ::::::::::-  \n-::::::::::`      `::::::::-   `-:.  `-::::::::       .::::::::::-  \n-:::::::::::       `::::::.   .::::-   -::::::`       :::::::::::-  \n-:::::::::::.       `::::.    ::::::`   -::::`       -:::::::::::-  \n-::::::::::::.       `:::`     `..``    .::-        .::::::::::::-  \n-:::::::::::::`        -:-`            `::.        .:::::::::::::-  \n-::::::::::::::`       `-::--...``...-:::-`       .::::::::::::::-  \n-:::::::::::::::.`.--::::::::::::::::::::::::--.`.:::::::::::::::-  \n-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-  \n-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-  \n-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-  \n-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-  \n.::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::`  \n `..............................................................`   ";
      ascii_olm = "        \n        \n        `-:://///::.`                  .:oshhhhhyo/.                  `-/+++++++/:.             \n     .:++/:-.....-:/++:.            -smmho/:---:/ohmms-            ./ooo/:-...-:/+oo+-          \n   ./+:.             ./+/.        -hMy:`            -sMd:        .+o+-`            ./oo-        \n  :o/`                 `/o:      oMh.                 .yMs      :oo.                 `+o+`      \n /o:                     :o:    sMs                     +My    /s+                     :so      \n-o/                       /o.  :Md                       yM/  .oo                       /o/     \n/o-                       -o:  sM+                       :Mh  /o/                       .oo     \n/o.                       -o/  +h:                       -Mh  :o:                       .oo     \n-o:                     ``/o:....```                  `. sM+-///:-.`                    /o/     \n /o-                 `.../o/    .:....`            `-//-/Md````-/////:`                -so`     \n  /o:              `..``:o/     `sNs. `..         :+/..oMh`     /o+..:+/`             /oo`      \n   -++:`         `..``:++-        /mNo.`..      `/+-.+NN+        -oo/..//-         `:oo:        \n     -/+/:-.```  .../+/.            :yNdy+:-..``++-yNh/`           -+oo+//.```..:/ooo:`         \n        .-:////...`..                 `-+shddd-:+..:`                 .:+++oooo++/-`            \n                ..                        `.` `++                        -/.                    \n                ..                        ..   ++`                       /+.                    \n                ..`                       ..   :+-                      `++                     \n                 ..                      ..`   `++.                     /+-                     \n                  ..`                  `..`     `/+-                  .++.                      \n                   `..`              `...         -++-`            `./+:`                       \n                     `...```    ```...`             -/+/:-.````.-:/+/-`                         \n                        ```......```                   .-://////:-.`                            \n                                                                                                \n                                                                                                ";
      return "<pre style='font-size:100%; color:red; line-height:100%;'>" + ascii + "</pre>";
    };
  })();

  Clirooo.Status = Clirooo.Status || {};

  (function() {
    var __getServiceStatusText;
    __getServiceStatusText = function(status) {
      var res;
      if (status === 1) {
        return res = '<span class="tm-text-line-status-good">Good Service</span>';
      } else {
        return res = '<span class="tm-text-line-status-delay">Delays</span>';
      }
    };
    return Clirooo.Status.getResponse = function(callback) {
      return $.getJSON(Clirooo.getApiBaseUrl() + "service_status.json", function(json) {
        var data, lineName, response, _ref;
        response = '';
        _ref = json.result;
        for (lineName in _ref) {
          data = _ref[lineName];
          response += "<span class=\"tm-text-" + lineName + "\">" + (Clirooo.Util.toUpperCaseOnlyFirstLetter(lineName)) + "</span> -- " + (__getServiceStatusText(data.status)) + "<br />";
        }
        return callback(response);
      });
    };
  })();

  Clirooo.Delay = Clirooo.Delay || {};

  (function() {
    return Clirooo.Delay.getResponse = function(callback) {
      return $.getJSON(Clirooo.getApiBaseUrl() + "service_status.json", function(json) {
        var data, key, lineName, response, _delayLine, _delayLines, _i, _len, _ref;
        _delayLines = [];
        _ref = json.result;
        for (lineName in _ref) {
          data = _ref[lineName];
          if (data.status !== 1) {
            _delayLines.push(lineName);
          }
        }
        if (_delayLines.length > 1) {
          response = '';
          for (key = _i = 0, _len = _delayLines.length; _i < _len; key = ++_i) {
            _delayLine = _delayLines[key];
            response += "<span class=\"tm-text-" + _delayLine + "\">" + (Clirooo.Util.toUpperCaseOnlyFirstLetter(_delayLine)) + "</span> -- <span class='tm-text-line-status-delay'>Delays</span><br />";
          }
          response += "<span class='tm-text-line-status-good'>Other lines are on Good Service.</span>";
          return callback(response);
        } else {
          return callback("<span class='tm-text-line-status-good'>All lines are on Good Service.</span>");
        }
      });
    };
  })();

  Clirooo.Line = Clirooo.Line || {};

  (function() {
    var __lines;
    __lines = ['ginza', 'marunouchi', 'hibiya', 'tozai', 'chiyoda', 'yurakucho', 'hanzomon', 'namboku', 'fukutoshin'];
    Clirooo.Line.getList = function() {
      var key, lineName, result, _i, _len;
      result = [];
      for (key = _i = 0, _len = __lines.length; _i < _len; key = ++_i) {
        lineName = __lines[key];
        result.push(lineName);
      }
      return result;
    };
    return Clirooo.Line.getResponse = function(args, callback) {
      var apiParams, cmdParams, key, line, lineName, result, _i, _len;
      result = '';
      line = args[0];
      cmdParams = args.slice(1);
      if (line) {
        apiParams = {
          "line": line
        };
        return $.getJSON(Clirooo.getApiBaseUrl() + "line.json", apiParams, function(json) {
          var key, key_trans, station, transferLine, _i, _j, _len, _len1, _ref, _ref1;
          result = '';
          if (__indexOf.call(cmdParams, '--reverse') >= 0) {
            json.result.stations.reverse();
          }
          _ref = json.result.stations;
          for (key = _i = 0, _len = _ref.length; _i < _len; key = ++_i) {
            station = _ref[key];
            result += "<span class=\"tm-text-" + line + "\">" + station.lineStationSymbol + ":" + station.name + "</span>";
            if ((station.transferLines != null) && station.transferLines.length > 0) {
              result += "  ~ transfer ";
              _ref1 = station.transferLines;
              for (key_trans = _j = 0, _len1 = _ref1.length; _j < _len1; key_trans = ++_j) {
                transferLine = _ref1[key_trans];
                result += "<span class=\"tm-text-" + transferLine.name + "\">" + (Clirooo.Util.toUpperCaseOnlyFirstLetter(transferLine.name)) + "</span>";
                if (key_trans + 1 < station.transferLines.length) {
                  result += "|";
                }
              }
            }
            result += "<br />";
            if (key + 1 < json.result.stations.length) {
              result += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br />";
            }
          }
          return callback(result);
        }).error(function(jqXHR, textStatus, errorThrown) {
          return callback(JSON.parse(jqXHR.responseText));
        });
      } else {
        for (key = _i = 0, _len = __lines.length; _i < _len; key = ++_i) {
          lineName = __lines[key];
          result += "<span class=\"tm-text-" + lineName + "\">" + (Clirooo.Util.toUpperCaseOnlyFirstLetter(lineName)) + "</span><br />";
        }
        return callback(result);
      }
    };
  })();

  Clirooo.Timetable = Clirooo.Timetable || {};

  (function() {
    return Clirooo.Timetable.getResponse = function(shell, args, callback) {
      var apiParams, cmdParams, station;
      if (!localStorage) {
        return callback("Sorry you cannot execute this command because your browser is unsuportted Web Storage");
      }
      station = args[0];
      cmdParams = args.slice(1);
      if (!station) {
        return callback("clirooo timetable STATION <DIRECTION>");
      }
      apiParams = {
        station: station
      };
      $.getJSON(Clirooo.getApiBaseUrl() + "timetable_board.json", apiParams, function(json) {
        var inputOptions, key, response, timetableBoard, timetableBoards, _i, _len, _setTimetableOutputCmd;
        timetableBoards = json.result;
        if (timetableBoards.length === 0) {
          return callback("Sorry, we have no timetable of " + station + " station");
        }
        response = "<br />";
        response += "Select a timetable:<br />";
        response += "<br />";
        for (key = _i = 0, _len = timetableBoards.length; _i < _len; key = ++_i) {
          timetableBoard = timetableBoards[key];
          timetableBoard.inputNumber = key + 1;
          response += "" + timetableBoard.inputNumber + ") <span class='tm-text-" + timetableBoard.line + "'>" + (Clirooo.Util.toUpperCaseOnlyFirstLetter(timetableBoard.line)) + "(for " + (Clirooo.Util.toUpperCaseOnlyFirstLetter(timetableBoard.direction)) + ")</span><br />";
        }
        Clirooo.CmdHandler.enableInputWaitingMode(shell);
        _setTimetableOutputCmd = function(ttb) {
          return shell.setCommandHandler(ttb.inputNumber, {
            exec: function(cmd, args, callback) {
              var inputOption, _j, _len1;
              Clirooo.CmdHandler.enableCliroooCommandMode(shell);
              for (_j = 0, _len1 = inputOptions.length; _j < _len1; _j++) {
                inputOption = inputOptions[_j];
                shell.removeCommandHandler(inputOption);
              }
              $.getJSON(Clirooo.getApiBaseUrl() + "timetable.json", {
                timetableBoardId: ttb.id
              }, function(json) {
                var boardType, hour, stopType, stopTypeArr, timetable, timetableSet, timetables, ttResponse, _k, _len2, _ref;
                timetableSet = json.result.timetables;
                ttResponse = "";
                stopTypeArr = [];
                for (boardType in timetableSet) {
                  timetables = timetableSet[boardType];
                  hour = null;
                  ttResponse += "<br />";
                  if (boardType === 'weekday') {
                    ttResponse += "[ Weekdays ]";
                  } else if (boardType === 'holiday') {
                    ttResponse += "[ Holidays ]";
                  }
                  for (key in timetables) {
                    timetable = timetables[key];
                    if (hour !== timetable.hour) {
                      hour = timetable.hour;
                      ttResponse += "<br />";
                      ttResponse += "" + timetable.hour + ":&nbsp;";
                    }
                    ttResponse += "<span class='tm-timetable-stop-type-" + timetable.stopType + "'>" + timetable.min + "</span>&nbsp;";
                    if (_ref = timetable.stopType, __indexOf.call(stopTypeArr, _ref) < 0) {
                      stopTypeArr.push(timetable.stopType);
                    }
                  }
                  ttResponse += "<br />";
                }
                ttResponse += "<br />Annotation:<br />";
                ttResponse += "Stop Type) ";
                for (_k = 0, _len2 = stopTypeArr.length; _k < _len2; _k++) {
                  stopType = stopTypeArr[_k];
                  ttResponse += "<span class='tm-timetable-stop-type-" + stopType + "'>" + stopType + "</span>&nbsp;";
                }
                ttResponse += "<br />";
                return callback(ttResponse);
              }).error(function(jqXHR, textStatus, errorThrown) {
                return callback(JSON.parse(jqXHR.responseText));
              });
            }
          });
        };
        inputOptions = [];
        for (key in timetableBoards) {
          timetableBoard = timetableBoards[key];
          inputOptions.push(timetableBoard.inputNumber);
        }
        for (key in timetableBoards) {
          timetableBoard = timetableBoards[key];
          _setTimetableOutputCmd(timetableBoard);
        }
        return callback(response);
      }).error(function(jqXHR, textStatus, errorThrown) {
        return callback(JSON.parse(jqXHR.responseText));
      });
    };
  })();

  Clirooo.Route = Clirooo.Route || {};

  (function() {
    return Clirooo.Route.getResponse = function(args, callback) {
      var apiParams, cmdParam, cmdParams, fromStation, key, match, toStation, _i, _len;
      fromStation = args[0];
      toStation = args[1];
      cmdParams = args.slice(2);
      if (!fromStation || !toStation) {
        callback("clirooo route STATION(from) STATION(to) [options]");
        return;
      }
      apiParams = {
        "from": fromStation,
        "to": toStation
      };
      if (cmdParams.length > 0) {
        for (key = _i = 0, _len = cmdParams.length; _i < _len; key = ++_i) {
          cmdParam = cmdParams[key];
          if (match = /^--type=(.+)$/.exec(cmdParam)) {
            apiParams.search = match[1];
          } else if (match = /^--time=(.+)$/.exec(cmdParam)) {
            apiParams.time = match[1];
          } else if (match = /^--date=(.+)$/.exec(cmdParam)) {
            apiParams.date = match[1];
          } else if (match = /^--via=(.+)$/.exec(cmdParam)) {
            apiParams.via = match[1];
          } else {
            callback("unrecognized argument: " + cmdParam);
            return;
          }
        }
      }
      return $.getJSON(Clirooo.getApiBaseUrl() + "route.json", apiParams, function(json) {
        var response, route_url, win;
        route_url = json.result.route_url;
        if (__indexOf.call(cmdParams, '--open-link') >= 0) {
          win = window.open(route_url, '_blank');
        }
        response = "<a href=\"" + route_url + "\" target=\"_blank\" class=\"tm-text-route-link\">" + route_url + "</a>";
        response += "&nbsp;(<- you can click and jump from here)";
        return callback(response);
      }).error(function(jqXHR, textStatus, errorThrown) {
        return callback(JSON.parse(jqXHR.responseText));
      });
    };
  })();

  Clirooo.Here = Clirooo.Here || {};

  (function() {
    return Clirooo.Here.getResponse = function(callback) {
      if (navigator.geolocation) {
        return navigator.geolocation.getCurrentPosition(function(position) {
          var apiParams;
          apiParams = {
            "lat": position.coords.latitude,
            "lon": position.coords.longitude
          };
          return $.getJSON(Clirooo.getApiBaseUrl() + "here.json", apiParams, function(json) {
            var key, nearStation, response, _ref;
            response = '';
            _ref = json.result.nearStations;
            for (key in _ref) {
              nearStation = _ref[key];
              console.log(nearStation);
              response += "<span>" + (Clirooo.Util.toUpperCaseOnlyFirstLetter(nearStation.name)) + "</span> -- " + nearStation.distance + "m<br />";
            }
            return callback(response);
          }).error(function(jqXHR, textStatus, errorThrown) {
            return callback(JSON.parse(jqXHR.responseText));
          });
        }, function() {
          return callback("Sorry, Failed to specify you location");
        });
      } else {
        return callback("Sorry, your browser is unsuportted Geolocation API");
      }
    };
  })();

  Clirooo.Config = Clirooo.Config || {};

  (function() {
    Clirooo.Config.getCommandList = function() {
      return ['list', 'set', 'delete', 'clear'];
    };
    return Clirooo.Config.getResponse = function(shell, args, callback) {
      var bgc, command, key, match, result, setting, userName;
      command = args[0];
      if (!command) {
        return callback("clirooo config [ list | set KEY=VALUE | delete KEY | clear ]");
      }
      switch (command) {
        case 'list':
          if (!localStorage) {
            return callback("there are no configuration");
          }
          result = '';
          if (localStorage.getItem('clirooo.name')) {
            result += "name: " + (localStorage.getItem('clirooo.name')) + "<br />";
          }
          if (localStorage.getItem('clirooo.bgc')) {
            result += "bgc: " + (localStorage.getItem('clirooo.bgc')) + "<br />";
          }
          return callback(result);
        case 'set':
          setting = args[1];
          if (!setting) {
            return callback("no argument for configure setting");
          }
          if (match = /^name=(.+)$/.exec(setting)) {
            userName = match[1];
            $('#js-user-name').html(userName);
            shell.onNewPrompt(function(callback) {
              return callback("" + userName + "$");
            });
            if (localStorage) {
              localStorage.setItem('clirooo.name', userName);
            }
            return callback("Hi, " + userName + "! Having fun?");
          } else if (match = /^bgc=(.+)$/.exec(setting)) {
            bgc = match[1];
            $('#shell-panel').css('background-color', bgc);
            if (localStorage) {
              localStorage.setItem('clirooo.bgc', bgc);
            }
            return callback("Changed background color to " + bgc + "! Do you like it?");
          } else {
            return callback("unrecognized argument: " + setting);
          }
        case 'delete':
          key = args[1];
          if (!key) {
            return callback("clirooo config delete KEY");
          }
          switch (key) {
            case 'name':
              $('#js-user-name').html('guest');
              shell.onNewPrompt(function(callback) {
                return callback("$");
              });
              if (localStorage) {
                localStorage.removeItem("clirooo.name");
              }
              break;
            case 'bgc':
              $('#shell-panel').css('background-color', '#000000');
              if (localStorage) {
                localStorage.removeItem("clirooo.bgc");
              }
              break;
            default:
              return callback("unknown key name: " + key);
          }
          return callback("Deleted your :" + key + " configuration");
        case 'clear':
          $('#js-user-name').html('guest');
          shell.onNewPrompt(function(callback) {
            return callback("$");
          });
          $('#shell-panel').css('background-color', '#000000');
          if (localStorage) {
            localStorage.removeItem("clirooo.name");
            localStorage.removeItem("clirooo.bgc");
          }
          return callback("Cleared your configuration");
        default:
          return callback("unrecognized configure command \'" + command + "\'");
      }
    };
  })();

  Clirooo.Invite = Clirooo.Invite || {};

  (function() {
    return Clirooo.Invite.getResponse = function(args, callback) {
      var email, result;
      result = '';
      email = args[0];
      return setTimeout(function() {
        return callback("We have sent invitaion email to <span class='tm-text-ginza'>kirikisinya@gmail.com</span>. Thank you for sharing!");
      }, 1000);
    };
  })();

  $(function() {
    var history, readline, shell;
    history = new Josh.History({
      key: 'josh.helloworld'
    });
    readline = new Josh.ReadLine({});
    readline.onCancel(function() {
      return readline.setLine({
        text: "",
        cursor: 0
      });
    });
    shell = Josh.Shell({
      history: history,
      readline: readline
    });
    shell.setCommandHandler("#", {
      exec: function(cmd, args, callback) {
        return callback("");
      }
    });
    if (localStorage && localStorage.getItem('clirooo.bgc')) {
      $('#shell-panel').css("background-color", localStorage.getItem('clirooo.bgc'));
    }
    Clirooo.initialize(shell);
    return shell.activate();
  });

  Clirooo.CmdHandler = Clirooo.CmdHandler || {};

  (function() {
    var __subCommands;
    __subCommands = ['line', 'station', 'status', 'route', 'delay', 'ascii', 'help', 'here', 'config', 'timetable', 'invite'];
    Clirooo.CmdHandler.enableCliroooCommandMode = function(shell) {
      shell.onNewPrompt(function(callback) {
        var userName;
        if (localStorage && localStorage.getItem('clirooo.name')) {
          userName = localStorage.getItem('clirooo.name');
          $('#js-user-name').html(userName);
          return callback("" + userName + "$");
        } else {
          return callback("$");
        }
      });
      return shell.setCommandHandler("clirooo", {
        exec: function(cmd, args, callback) {
          var param, station, subCommand;
          subCommand = args[0] || '';
          switch (subCommand) {
            case 'line':
              param = args.slice(1);
              return Clirooo.Line.getResponse(param, function(res) {
                return callback(res);
              });
            case 'station':
              station = args.slice(1);
              return Clirooo.Station.getResponse(station, function(res) {
                return callback(res);
              });
            case 'status':
              return Clirooo.Status.getResponse(function(res) {
                return callback(res);
              });
            case 'delay':
              return Clirooo.Delay.getResponse(function(res) {
                return callback(res);
              });
            case 'timetable':
              param = args.slice(1);
              return Clirooo.Timetable.getResponse(shell, param, function(res) {
                return callback(res);
              });
            case 'route':
              param = args.slice(1);
              return Clirooo.Route.getResponse(param, function(res) {
                return callback(res);
              });
            case 'here':
              return Clirooo.Here.getResponse(function(res) {
                return callback(res);
              });
            case 'config':
              param = args.slice(1);
              return Clirooo.Config.getResponse(shell, param, function(res) {
                return callback(res);
              });
            case 'ascii':
              return callback(Clirooo.Ascii.getResponse());
            case 'mannar':
              return callback(Clirooo.Mannar.getResponse());
            case 'invite':
              param = args.slice(1);
              return Clirooo.Invite.getResponse(param, function(res) {
                return callback(res);
              });
            default:
              return callback(Clirooo.Help.getResponse());
          }
        },
        completion: function(cmd, arg, line, callback) {
          if (line.text.match(/clirooo line/i)) {
            return callback(shell.bestMatch(arg, Clirooo.Line.getList()));
          } else if (line.text.match(/clirooo station/i)) {
            return callback(shell.bestMatch(arg, Clirooo.Station.getList()));
          } else if (line.text.match(/clirooo route/i)) {
            return callback(shell.bestMatch(arg, Clirooo.Station.getList()));
          } else if (line.text.match(/clirooo timetable/i)) {
            return callback(shell.bestMatch(arg, Clirooo.Station.getList()));
          } else if (line.text.match(/clirooo config/i)) {
            return callback(shell.bestMatch(arg, Clirooo.Config.getCommandList()));
          } else {
            return callback(shell.bestMatch(arg, __subCommands));
          }
        }
      });
    };
    return Clirooo.CmdHandler.enableInputWaitingMode = function(shell) {
      shell.removeCommandHandler('clirooo');
      return shell.onNewPrompt(function(callback) {
        return callback("Select number:");
      });
    };
  })();

}).call(this);
